{"version":3,"sources":["mainMenu.js","difficulty.js","ingame.js","reportWebVitals.js","index.js"],"names":["MainMenu","props","id","ref","mainMenuRef","onSubmit","e","preventDefault","start","startGame","type","placeholder","onChange","handleChange","maxLength","required","value","DifficultyMenu","changeValues","onClick","changeDifficultyValue","resetChances","difficultyToIngame","className","difficultyRef","username","name","Ingame","useEffect","difficulty","changeMax","changeRange","randomiser","Math","floor","random","parseInt","difficultyValue","changeRandomNumber","console","log","setRandomNumber","changeMin","setTimeTaken","interval","setInterval","seconds","clearInterval","updateRange","userInput","ingameRef","hint","min","max","limitBeforeRef","rangeRef","limitAfterRef","chances","resetInput","randomNumber","setHint","setResultResponse","setRecordedTime","timeTaken","playerName","playerTime","setEasyLeaders","easyLeaders","setNormalLeaders","normalLeaders","setHardLeaders","hardLeaders","ingameToResult","subtractChances","onChangeInput","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Result","resultRef","resultResponse","recordedTime","resultToMain","reset","resultToLeaderBoard","Leaderboard","leadersArr","bil","leaderBoardDeter","leaderboardSelect","switchLeaderboard","target","setLeaderboardSelect","easyLeaderBoardRef","current","normalLeaderBoardRef","hardLeaderBoardRef","tableItems","leadersArrSorted","sort","a","b","parseFloat","time","length","slice","colSpan","map","val","leaderboardRef","leaderboardToResult","App","useState","JSON","parse","localStorage","getItem","setItem","stringify","setUsername","setDifficulty","setDifficultyValue","minRange","setMinRange","maxRange","setMaxRange","setChances","setUserInput","useRef","style","flex","el","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d52b88dc.chunk.js","sourcesContent":["export function MainMenu(props){\n\n  function startGame(e){\n    e.preventDefault();\n    props.start();\n  }\n\n    return <div id=\"mainMenu\" ref={props.mainMenuRef}>\n      <h1>Number Guessing Game</h1>\n      <form onSubmit={e => {startGame(e)}}>\n        <input type=\"text\" placeholder=\"Enter Name\" onChange={props.handleChange} maxLength={12} required/>\n        <br/><br/>\n        <input type=\"submit\" value=\"Start\"/>\n      </form>\n    </div>;\n}","export function DifficultyMenu(props){\n\n    function changeValues(e){\n        props.onClick(e);\n        props.changeDifficultyValue(e);\n        props.resetChances();\n        props.difficultyToIngame();\n    }\n\n    return <div id=\"difficulty\" className=\"hide\" ref={props.difficultyRef}>\n      <p>Greetings, {props.username}!</p>\n      <h3>Difficulty</h3>\n      <button onClick={e => {changeValues(e)}} value=\"easy\" name=\"100\">Easy</button>\n      <button onClick={e => {changeValues(e)}} value=\"normal\" name=\"1000\">Normal</button>\n      <button onClick={e => {changeValues(e)}} value=\"hard\" name=\"10000\">Hard</button>\n    </div>;\n  }","import { useEffect } from \"react\";\n\nexport function Ingame(props){\n\n    function changeRange(){\n        switch(props.difficulty){\n            case 'easy':\n                props.changeMax(100);\n                break;\n\n            case 'normal':\n                props.changeMax(1000);\n                break;\n\n            case 'hard':\n                props.changeMax(10000);\n                break;\n        }\n\n    }\n\n    function setRandomNumber(){\n        let randomiser = Math.floor(Math.random()*parseInt(props.difficultyValue));\n        props.changeRandomNumber(randomiser);\n        console.log(randomiser);\n    }\n\n    useEffect(() => {\n        changeRange();\n        setRandomNumber();\n        props.changeMin(0);\n        props.setTimeTaken(0);\n        const interval = setInterval(() => {\n            props.setTimeTaken(seconds => seconds + 1)\n        }, 1000);\n        return () => {clearInterval(interval)};\n    }, [props.difficulty]);\n\n    useEffect(() => {\n        props.updateRange();\n    }, [props.userInput]);\n\n    function checkAnswer(e){\n        e.preventDefault();\n        props.resetInput();\n\n        if(parseInt(props.userInput) < props.randomNumber){\n            props.setHint(\"Guess is Lower\");\n            props.changeMin(parseInt(props.userInput)+1);\n\n        } else if(parseInt(props.userInput) > props.randomNumber){\n            props.setHint(\"Guess is Higher\");\n            props.changeMax(parseInt(props.userInput)-1);\n\n        }\n\n        if(parseInt(props.userInput) === props.randomNumber){\n            props.setResultResponse(\"Congrats! You guessed the number\");\n            props.setRecordedTime(props.timeTaken);\n\n            let playerName = props.username;\n            let playerTime = props.timeTaken;\n\n            if(props.difficulty === \"easy\"){\n                props.setEasyLeaders([...props.easyLeaders, {\"username\":playerName, \"time\":playerTime}]);\n            } else if (props.difficulty === \"normal\"){\n                props.setNormalLeaders([...props.normalLeaders, {\"username\":playerName, \"time\":playerTime}]);\n            } else if (props.difficulty === \"hard\"){\n                props.setHardLeaders([...props.hardLeaders, {\"username\":playerName, \"time\":playerTime}]);\n            }\n\n            props.ingameToResult();\n        } else {\n            props.subtractChances();\n\n            if(parseInt(props.chances) === 1){\n                props.setResultResponse(\"GAME OVER\");\n                props.setRecordedTime(props.timeTaken);\n                props.ingameToResult();\n            }\n        }\n    }\n\n    return <div id=\"ingame\" className=\"hide\" ref={props.ingameRef}>\n      <h3>{props.hint}</h3>\n      <p id=\"rangeText\">Current Range: {props.min} - {props.max}</p>\n      <div id=\"bar\">\n        <div id=\"limitBefore\" ref={props.limitBeforeRef}></div>\n        <div id=\"range\" ref={props.rangeRef}></div>\n        <div id=\"limitAfter\" ref={props.limitAfterRef}></div>\n      </div>\n      <p id=\"chances\">Chances: {props.chances}</p>\n      <form onSubmit={checkAnswer}>\n        <input type=\"number\" min={props.min} \n        max={props.max} onChange={props.onChangeInput} \n        value={props.userInput} required/>\n        <input type=\"submit\" value=\"Guess\"/>\n      </form>\n      <p id=\"timeTaken\">{props.timeTaken}s</p>\n    </div>;\n  }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { useState,useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport { MainMenu } from './mainMenu.js';\nimport { DifficultyMenu } from './difficulty.js';\nimport { Ingame } from './ingame.js';\nimport reportWebVitals from './reportWebVitals';\n\n\nfunction Result(props){\n  return <div id=\"result\" className=\"hide\" ref={props.resultRef}>\n    <h3>{props.resultResponse}</h3>\n    <p>The number was {props.randomNumber}</p>\n    <p>Time Taken: {props.recordedTime}s</p>\n    <button id=\"playAgain\" onClick={() => {props.resultToMain(); props.reset()}}>Play Again</button>\n    <br/><br/>\n    <button id=\"leaderboard\" onClick={() => {props.resultToLeaderBoard()}}>Leaderboard</button>\n  </div>;\n}\n\nfunction Leaderboard(props){\n  let bil = 1;\n  let leaderBoardDeter = props.leaderboardSelect;\n  let leadersArr;\n  if(leaderBoardDeter === \"easy\"){\n    leadersArr = props.easyLeaders;\n  } else if (leaderBoardDeter === \"normal\"){\n    leadersArr = props.normalLeaders;\n  } else  if (leaderBoardDeter === \"hard\"){\n    leadersArr = props.hardLeaders;\n  }\n\n  function switchLeaderboard(e){\n\n    if(e.target.id === \"easy\"){\n      props.setLeaderboardSelect(\"easy\");\n      props.easyLeaderBoardRef.current.className = \"selected\";\n      props.normalLeaderBoardRef.current.className = \"\";\n      props.hardLeaderBoardRef.current.className = \"\"\n\n    } else if (e.target.id === \"normal\"){\n      props.setLeaderboardSelect(\"normal\");\n      props.easyLeaderBoardRef.current.className = \"\";\n      props.normalLeaderBoardRef.current.className = \"selected\";\n      props.hardLeaderBoardRef.current.className = \"\"\n\n    } else if (e.target.id === \"hard\"){\n      props.setLeaderboardSelect(\"hard\");\n      props.easyLeaderBoardRef.current.className = \"\";\n      props.normalLeaderBoardRef.current.className = \"\";\n      props.hardLeaderBoardRef.current.className = \"selected\"\n      \n    }\n  }\n  let leadersArrSorted = leadersArr.sort((a, b) => parseFloat(a.time) - parseFloat(b.time));\n  if(leadersArrSorted.length >= 10){\n    leadersArrSorted = leadersArrSorted.slice(0,10);\n  }\n\n  let tableItems;\n  if(leadersArrSorted.length === 0){\n    tableItems = <tr><td colSpan={3}>None so far</td></tr>\n  } else {\n    tableItems = leadersArrSorted.map(val => <tr><td>{bil++}</td><td>{val.username}</td><td>{val.time}s</td></tr>);\n  }\n\n  return <div id=\"leaderboard\" className=\"hide\" ref={props.leaderboardRef}>\n    <h2>Local Leaderboard</h2>\n    <button onClick={e => switchLeaderboard(e)} id=\"easy\" className=\"selected\" ref={props.easyLeaderBoardRef}>Easy</button>\n    <button onClick={e => switchLeaderboard(e)} id=\"normal\" ref={props.normalLeaderBoardRef}>Normal</button>\n    <button onClick={e => switchLeaderboard(e)} id=\"hard\" ref={props.hardLeaderBoardRef}>Hard</button>\n    <br/>\n    <table>\n      <tr>\n        <th>No.</th>\n        <th>Username</th>\n        <th>Time</th>\n      </tr>\n      {tableItems}\n      </table>\n    <button onClick={() => {props.leaderboardToResult()}}>Return</button>\n  </div>;\n}\n\n\nfunction App(){\n\n  let [easyLeaders, setEasyLeaders] = useState(JSON.parse(localStorage.getItem(\"zum_number_guessing_easy_leaders\")) || []);\n  localStorage.setItem(\"zum_number_guessing_easy_leaders\", JSON.stringify(easyLeaders));\n\n  let [normalLeaders, setNormalLeaders] = useState(JSON.parse(localStorage.getItem(\"zum_number_guessing_normal_leaders\")) || []);\n  localStorage.setItem(\"zum_number_guessing_normal_leaders\", JSON.stringify(normalLeaders));\n\n  let [hardLeaders, setHardLeaders] = useState(JSON.parse(localStorage.getItem(\"zum_number_guessing_hard_leaders\")) || []);\n  localStorage.setItem(\"zum_number_guessing_hard_leaders\", JSON.stringify(hardLeaders));\n\n  let [leaderboardSelect, setLeaderboardSelect] = useState(\"easy\");\n\n  let [username, setUsername] = useState(\"\");\n  function changeUsername(e){setUsername(e.target.value)}\n\n  let [difficulty, setDifficulty] = useState(\"\");\n  function changeDifficulty(e){setDifficulty(e.target.value);}\n\n  let [difficultyValue, setDifficultyValue] = useState(100);\n  function changeDifficultyValue(e){setDifficultyValue(e.target.name)}\n\n  let [minRange, setMinRange] = useState(0);\n  function changeMin(value){setMinRange(value)}\n\n  let [maxRange, setMaxRange] = useState(100);\n  function changeMax(value){setMaxRange(value)}\n\n  let [randomNumber, setRandomNumber] = useState(0);\n  function changeRandomNumber(value){setRandomNumber(value)}\n\n  let [hint, setHint] = useState(\"Guess The Number!\");\n\n  let [chances, setChances] = useState(10);\n  function subtractChances(){setChances(chances-1)}\n  function resetChances(){setChances(10)}\n\n  let [userInput, setUserInput] = useState(\"\");\n  function onChangeInput(e){setUserInput(e.target.value)}\n  function resetInput(){setUserInput(\"\")}\n\n  let [resultResponse, setResultResponse] = useState(\"\");\n\n  let [timeTaken, setTimeTaken] = useState(0);\n  let [recordedTime, setRecordedTime] = useState(0);\n\n\n  function reset(){\n    setDifficulty(\"\");\n    setDifficultyValue(100);\n    setMinRange(0);\n    setMaxRange(100);\n    setRandomNumber(0);\n    setHint(\"Guess The Number!\");\n    setChances(10);\n    setRecordedTime(0);\n    limitBeforeRef.current.style.flex = 0;\n    rangeRef.current.style.flex = 100 + \"%\";\n    limitAfterRef.current.style.flex = 0;\n  }\n  \n\n  let mainMenuRef = useRef();\n  let difficultyRef = useRef();\n  let ingameRef = useRef();\n  let resultRef = useRef();\n  let leaderboardRef = useRef();\n\n  \n\n  function start(){\n    mainMenuRef.current.className = \"hide\";\n    difficultyRef.current.className = \"\";\n  }\n\n  function difficultyToIngame(){\n    difficultyRef.current.className = \"hide\";\n    ingameRef.current.className = \"\";\n  }\n\n  function ingameToResult(){\n    ingameRef.current.className = \"hide\";\n    resultRef.current.className = \"\";\n  }\n\n  function resultToMain(){\n    resultRef.current.className = \"hide\";\n    mainMenuRef.current.className = \"\";\n  }\n\n  function resultToLeaderBoard(){\n    resultRef.current.className = \"hide\";\n    leaderboardRef.current.className = \"\";\n  }\n\n  function leaderboardToResult(){\n    resultRef.current.className = \"\";\n    leaderboardRef.current.className = \"hide\";\n  }\n\n  let limitBeforeRef = useRef();\n  let limitAfterRef = useRef();\n  let rangeRef = useRef();\n\n  function updateRange(){\n    limitBeforeRef.current.style.flex = minRange + \"%\";\n    rangeRef.current.style.flex = maxRange - minRange + \"%\";\n    limitAfterRef.current.style.flex = difficultyValue - maxRange + \"%\";\n  }\n\n  let easyLeaderBoardRef = useRef();\n  let normalLeaderBoardRef = useRef();\n  let hardLeaderBoardRef = useRef();\n\n\n  return <div id=\"container\">\n\n    <MainMenu handleChange={changeUsername} mainMenuRef={mainMenuRef} start={start}/>\n    <DifficultyMenu \n    username={username} \n    difficulty={difficulty} \n    onClick={changeDifficulty}\n    changeDifficultyValue={changeDifficultyValue}\n    resetChances={resetChances}\n    difficultyRef={difficultyRef}\n    difficultyToIngame={difficultyToIngame}/>\n    <Ingame\n    ingameRef={ingameRef} \n    changeMin={changeMin} \n    changeMax={changeMax}\n    min={minRange} \n    max={maxRange} \n    difficulty={difficulty}\n    difficultyValue={difficultyValue}\n    randomNumber={randomNumber}\n    changeRandomNumber={changeRandomNumber}\n    chances={chances}\n    subtractChances={subtractChances}\n    userInput={userInput}\n    onChangeInput={onChangeInput}\n    setResultResponse={setResultResponse}\n    resetInput={resetInput}\n    hint={hint}\n    setHint={setHint}\n    ingameToResult={ingameToResult}\n    limitBeforeRef={limitBeforeRef}\n    rangeRef={rangeRef}\n    limitAfterRef={limitAfterRef}\n    updateRange={updateRange}\n    timeTaken={timeTaken}\n    setTimeTaken={setTimeTaken}\n    setRecordedTime={setRecordedTime}\n    setDifficulty={setDifficulty}\n    easyLeaders={easyLeaders}\n    setEasyLeaders={setEasyLeaders}\n    normalLeaders={normalLeaders}\n    setNormalLeaders={setNormalLeaders}\n    hardLeaders={hardLeaders}\n    setHardLeaders={setHardLeaders}\n    username={username}\n    />\n    <Result \n    randomNumber={randomNumber} \n    resultResponse={resultResponse} \n    resultRef={resultRef}\n    resultToMain={resultToMain}\n    reset={reset}\n    resultToLeaderBoard={resultToLeaderBoard}\n    timeTaken={timeTaken}\n    recordedTime={recordedTime}/>\n\n    <Leaderboard \n    leaderboardRef={leaderboardRef}\n    leaderboardToResult={leaderboardToResult}\n    easyLeaders={easyLeaders}\n    normalLeaders={normalLeaders}\n    hardLeaders={hardLeaders}\n    leaderboardSelect={leaderboardSelect}\n    setLeaderboardSelect={setLeaderboardSelect}\n    easyLeaderBoardRef={easyLeaderBoardRef}\n    normalLeaderBoardRef={normalLeaderBoardRef}\n    hardLeaderBoardRef={hardLeaderBoardRef}\n    />\n    \n  </div>\n\n}\n\n\n\nconst el = <App/>;\n\nReactDOM.render(el, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}